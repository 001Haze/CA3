// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DecentralizedMarketplace {
    struct Item {
        uint256 id;
        address payable seller;
        address buyer;
        uint256 price;
        bool sold;
    }

    uint256 public itemCount;
    mapping(uint256 => Item) public items;

    event ItemListed(uint256 indexed id, address indexed seller, uint256 price);
    event ItemPurchased(uint256 indexed id, address indexed buyer, uint256 price);

    // Function to list an item for sale
    function listItem(uint256 _price) public {
        require(_price > 0, "Price must be greater than zero");

        itemCount++;
        items[itemCount] = Item({
            id: itemCount,
            seller: payable(msg.sender),
            buyer: address(0),
            price: _price,
            sold: false
        });

        emit ItemListed(itemCount, msg.sender, _price);
    }

    // Function to buy an item
    function buyItem(uint256 _id) public payable {
        Item storage item = items[_id];
        require(_id > 0 && _id <= itemCount, "Invalid item ID");
        require(msg.value == item.price, "Please pay the exact price");
        require(!item.sold, "Item already sold");
        require(item.seller != msg.sender, "Seller cannot buy their own item");

        // Transfer payment to the seller
        item.seller.transfer(msg.value);

        // Update ownership and item status
        item.buyer = msg.sender;
        item.sold = true;

        emit ItemPurchased(_id, msg.sender, item.price);
    }

    // Fetch item details (for debugging and frontend purposes)
    function getItem(uint256 _id) public view returns (Item memory) {
        require(_id > 0 && _id <= itemCount, "Invalid item ID");
        return items[_id];
    }
}
